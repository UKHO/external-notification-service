parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    type: boolean
    default: false
  - name: AzureSubscription
    type: string

steps:
  - task: FileTransform@2
    displayName: "File Transform: Ens $(Environment) Config"  
    inputs:
      folderPath: '$(Pipeline.Workspace)/terraformartifact/src'
      enableXmlTransform: false
      jsonTargetFiles: 'appsettings.json'

  - task: PowerShell@2
    displayName: "terraform $(Environment) deploy"
    name: setVariable
    inputs:
      targetType: filePath
      filePath: '$(Pipeline.Workspace)/terraformartifact/terraform_conditional_run.ps1'
      arguments: '-deploymentResourceGroupName $(DeploymentResourceGroupName) -deploymentStorageAccountName $(DeploymentStorageAccountName) -workSpace $(Environment) -continueEvenIfResourcesAreGettingDestroyed $${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }} -terraformJsonOutputFile $(Pipeline.Workspace)/terraformartifact/terraform_output.json -elasticApmServerUrl $(ElasticAPM.ServerURL) -elasticApmApiKey $(ElasticAPM.ApiKey) -elasticApmEnvironment "$(ElasticAPM.Environment)" -elasticApmWebJobServiceName "$(ElasticAPM.WebJobServiceName)"'
    env:
      ARM_CLIENT_ID: $(TERRAFORM-CLIENT-ID)
      ARM_CLIENT_SECRET: $(TERRAFORM-CLIENT-SECRET)
      ARM_TENANT_ID: $(TERRAFORM-TENANT-ID)
      ARM_SUBSCRIPTION_ID: $(TERRAFORM-SUBSCRIPTION-ID)
      TF_VAR_allowed_ips: $(whiteListedIps)
      TF_VAR_spoke_rg: $(spokeRG)
      TF_VAR_spoke_vnet_name: $(spokeVnetName)
      TF_VAR_spoke_subnet_name: $(spokeSubnetName)
      TF_VAR_agent_rg: $(agentRG)
      TF_VAR_agent_vnet_name: $(agentVnetName)
      TF_VAR_agent_subnet_name: $(agentSubnetName)
      TF_VAR_agent_subscription_id: $(agentSubscriptionId)
      TF_VAR_private_endpoint_subnet_name: $(privateEndpointSubnet)
      TF_VAR_core_services_subscription_id: $(coreServicesSubscriptionId)
      TF_VAR_core_services_rg: $(coreServicesRG)

  - bash: echo "##vso[task.setvariable variable=D365CallbackConfiguration.D365ApiUri]$(D365ApiStubUri)"
    name: SetStubURL
    condition: and(succeeded(), ne(variables['Environment.Name'], 'Ens-Live'))

  - task: FileTransform@2
    displayName: "File Transform: WebAppSettings"
    inputs:
      folderPath: '$(Pipeline.Workspace)/ExternalNotificationService/*.zip'
      enableXmlTransform: false
      jsonTargetFiles: '**/appsettings.json'

  - task: AzureWebApp@1
    displayName: "Azure App Deploy: Staging slot"
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      appType: webApp
      appName: "$(WEB_APP_NAME)"
      package: "$(Pipeline.Workspace)/ExternalNotificationService/UKHO.ExternalNotificationService.API.zip"
      deployToSlotOrASE: true
      slotName: $(WEB_APP_SLOT_NAME)

  - task: PowerShell@2
    displayName: "Check the status of staging slot"
    inputs:
      targetType: filePath
      filePath: "$(Pipeline.Workspace)/terraformartifact/check_service_status.ps1"
      arguments: "-healthEndPointUrl https://$(WEB_APP_SLOT_HOST_NAME)/health -waitTimeInMinute $(waitTimeInMinute)"
     
  - task: AzureAppServiceManage@0
    displayName: "Swap with production slot"
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      resourceGroupName: $(ResourceGroup)
      webAppName: $(WEB_APP_NAME)
      action: "Swap Slots"
      swapWithProduction: true
      sourceSlot: $(WEB_APP_SLOT_NAME)

  - task: PowerShell@2
    displayName: "Check the status of Service"
    inputs:
      targetType: filePath
      filePath: "$(Pipeline.Workspace)/terraformartifact/check_service_status.ps1"
      arguments: "-healthEndPointUrl $(EnsApiUrl)/health -waitTimeInMinute $(waitTimeInMinute)"

  - task: FileTransform@2
    displayName: "File Transform: StubWebAppSettings"
    condition: and(succeeded(), ne(variables['Environment.Name'], 'Ens-Live'))
    inputs:
      folderPath: '$(Pipeline.Workspace)/StubWebAPI/*.zip'
      enableXmlTransform: false
      jsonTargetFiles: '**/appsettings.json'           

  - task: AzureWebApp@1
    displayName: "Azure App Deploy: ens-$(Environment)-stub-webapp"
    condition: and(succeeded(), ne(variables['Environment.Name'], 'Ens-Live'))
    inputs:
      azureSubscription: "${{ parameters.AzureSubscription }}"
      appType: webApp
      appName: "$(stubWebAppName)"
      package: "$(Pipeline.Workspace)/StubWebAPI/UKHO.D365CallbackDistributorStub.API.zip"
