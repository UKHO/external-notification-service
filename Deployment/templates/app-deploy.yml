parameters:
# If set to true, the pipeline will continue even if resources are getting destroyed. Default is false.
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    type: boolean
# The name of the environment to be used in Azure DevOps.
  - name: AzureEnvironment
    type: string
# The name of the Terraform workspace to use. Will also be used to generate job names and, in lower case, used to select the correct var/x-deploy.yml variable file.
  - name: ShortName
    type: string
# The apim short name
  - name: ApimShortName
    type: string
# The Terraform Azure PowerShell container.
  - name: Container
    type: string
# The Azure Subscription version
  - name: AzureSubscriptionVersion
    type: string
# Run functional tests.
  - name: RunFunctionalTests
    type: boolean
    default: false

jobs:
  - template: gated-infrastructure-deploy/gated-infrastructure-deploy.yml@UKHOTemplates
    parameters:
      AzDOEnvironmentName: ${{ parameters.AzureEnvironment }}
      TFStateResourceGroupName: $(DeploymentResourceGroupName)
      TFStateStorageAccountName: $(DeploymentStorageAccountName)
      TFStateContainerName: "tfstate"
      TFStateBlobName: "terraform.deployment.tfplan"
      TerraformWorkspace: $(Environment)
      TerraformArtifactConfigRelativePath: "/src/"
      TerraformArtifact: "terraformartifact"
      TerraformContainer: ${{ parameters.Container }}
      VariablesTemplateRelativePath: /Deployment/templates/var/${{ lower(parameters.ShortName) }}-deploy.yml
      TerraformVariableMappings:
        ARM_CLIENT_ID: $(TERRAFORM-CLIENT-ID)
        ARM_CLIENT_SECRET: $(TERRAFORM-CLIENT-SECRET)
        ARM_TENANT_ID: $(TERRAFORM-TENANT-ID)
        ARM_SUBSCRIPTION_ID: $(TERRAFORM-SUBSCRIPTION-ID)
        TF_VAR_allowed_ips: $(whiteListedIps)
        TF_VAR_spoke_rg: $(spokeRG)
        TF_VAR_spoke_vnet_name: $(spokeVnetName)
        TF_VAR_spoke_subnet_name: $(spokeSubnetName)
        TF_VAR_agent_rg: $(agentRG)
        TF_VAR_agent_vnet_name: $(agentVnetName)
        TF_VAR_agent_subnet_name: $(agentSubnetName)
        TF_VAR_agent_subscription_id: $(agentSubscriptionId)
        TF_VAR_private_endpoint_subnet_name: $(privateEndpointSubnet)
        TF_VAR_core_services_subscription_id: $(coreServicesSubscriptionId)
        TF_VAR_core_services_rg: $(coreServicesRG)
        TF_VAR_elastic_apm_server_url: $(ElasticAPM.ServerURL)
        TF_VAR_elastic_apm_api_key: $(ElasticAPM.ApiKey)
        TF_VAR_elastic_apm_environment: "$(ElasticAPM.Environment)"
        TF_VAR_elastic_apm_service_name: "$(ElasticAPM.WebJobServiceName)"
      TerraformOutputVariables:
        web_app_name
        event_storage_queue
        env_name
        ens_storage_connection_string
        dead_letter_storage_container
        stub_webappname
        ens_stub_web_app_url
        webapp_rg
        event_grid_domain_endpoint_url
        dead_letter_storage_destination_container
        web_app_slot_name
        web_app_slot_default_site_hostname

  - deployment: ${{ upper(parameters.ShortName) }}DeployApp
    dependsOn: deployInfrastructure
    displayName: "${{ upper(parameters.ShortName) }} - deploy terraform and dotnet App"
    environment: ${{ parameters.AzureEnvironment }}
    container: ${{parameters.Container}}
    workspace:
      clean: all
    variables: 
    - template: var/${{ lower(parameters.ShortName) }}-deploy.yml
    - name: WEB_APP_NAME
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.web_app_name']]
    - name: SubscriptionStorageConfiguration.QueueName
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.event_storage_queue']]
    - name: EventHubLoggingConfiguration.Environment
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.env_name']]
    - name: EnsStorageConnectionString
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.ens_storage_connection_string']]
    - name: EnsStorageQueueName
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.event_storage_queue']]
    - name: SubscriptionStorageConfiguration.StorageContainerName
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.dead_letter_storage_container']]
    - name: stubWebAppName
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.stub_webappname']]
    - name: D365ApiStubUri
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.ens_stub_web_app_url']]
    - name: ResourceGroup
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.webapp_rg']]
    # - name: ResourceGroupName
    #   value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.webapp_rg']]
    - name: EventGridDomainConfiguration.EventGridDomainEndpoint
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.event_grid_domain_endpoint_url']]
    - name: SubscriptionStorageConfiguration.DeadLetterDestinationContainerName
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.dead_letter_storage_destination_container']]
    - name: WEB_APP_SLOT_NAME
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.web_app_slot_name']]
    - name: WEB_APP_SLOT_HOST_NAME
      value: $[dependencies.deployInfrastructure.outputs['deployInfrastructure.deployment.web_app_slot_default_site_hostname']]
    strategy:
      runOnce:
        deploy:
          steps:
            - template: /Deployment/templates/continuous-deployment.yml
              parameters:
                ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                AzureSubscription: External Notification Service ${{ parameters.AzureSubscriptionVersion }} 

            # - template: /Deployment/templates/continuous-deployment-apim.yml
            #   parameters:
            #     ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
            #     AzureSubscription: UKHO-APIM-SOLAS-${{ parameters.ApimShortName }}
            #     TerraformKeyVault: $(APIM_TERRAFORM_KEYVAULT)
            #     APIMResourceGroup: $(APIM_RESOURCE_GROUP_NAME)
            #     APIMServiceInstance: $(APIM_SERVICE_NAME)
            #     tfstateStorageAccountName: $(APIM_TFSTATE_STORAGE_ACCOUNT_NAME)

            # - ${{ if eq(parameters.RunFunctionalTests, true) }}:
            #   - template: /Deployment/templates/functional-test-process.yml
            #     parameters:
            #       TestTitle: "Dev-AutomationTests"

            # - ${{ if eq(parameters.RunFunctionalTests, true) }}:
            #   - task: AzureCLI@2
            #     displayName: "Swap Stub URL"
            #     condition: always()
            #     inputs:
            #       azureSubscription: External Notification Service ${{ parameters.AzureSubscriptionVersion }}
            #       scriptType: 'pscore'
            #       scriptLocation: 'scriptPath'
            #       scriptPath: '$(Pipeline.Workspace)/terraformartifact/set_stub_url.ps1'
            #       arguments: '-d365uri $(D365EnvApiUri) -resourceGroup $(ResourceGroup) -webappName $(WEB_APP_NAME)'
            
