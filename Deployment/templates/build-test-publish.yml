parameters:
- name: DotNetVersion
  type: string
  default: '8.0.x'

jobs:
- job: UnitTestsAndCodeCoverage
  workspace:
    clean: all
  displayName: "Dotnet Test and Publish Code Coverage"
  steps:
  - task: UseDotNet@2
    displayName: Use .NET ${{ parameters.DotNetVersion }} sdk
    inputs:
      packageType: sdk
      version: '${{ parameters.DotNetVersion }}' 
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: DotNetCoreCLI@2
    displayName: ".Net Core - NuGet restore test projects only"
    inputs:
      command: "restore"
      projects: "**/*Tests.csproj"
      feedsToUse: config
      noCache: true
      nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
      workingDirectory: '$(Build.SourcesDirectory)\UKHO.ExternalNotificationService.API'
      packagesDirectory: '$(Build.SourcesDirectory)\UKHO.ExternalNotificationService.API\packagesForTests'

  - task: DotNetCoreCLI@2
    displayName: "dotnet test - Perform Unit Tests"
    inputs:
      command: "test"
      projects: "**/*UnitTests.csproj"
      arguments: '--configuration $(BuildConfiguration) --settings "$(Build.SourcesDirectory)\test.runsettings" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
      publishTestResults: true
      testRunTitle: "UnitTests"

  - task: PowerShell@2
    displayName: "Generate code coverage report"
    inputs:
      targetType: filePath
      filePath: '$(Build.SourcesDirectory)\CodeCoverageReport.ps1'
      arguments: '-source "$(Build.SourcesDirectory)" -reportFolder "$(Build.ArtifactStagingDirectory)"'

  - task: PublishBuildArtifacts@1
    displayName: "Publish Code coverage"
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)/codecoveragereport"
      ArtifactName: codecoveragereport

- job: BuildAndPublishAPI
  workspace:
    clean: all
  displayName: "Dotnet Build publish API"
  steps:
  - task: PowerShell@2
    displayName: "Set assembly version numbers based on build ID"
    inputs:
      targetType: filePath
      filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
      arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\UKHO.ExternalNotificationService.API\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$env:UKHOAssemblyProduct"'

  - task: UseDotNet@2
    displayName: Use .NET ${{ parameters.DotNetVersion }} sdk
    inputs:
      packageType: sdk
      version: '${{ parameters.DotNetVersion }}'
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: DotNetCoreCLI@2
    displayName: ".Net Core - NuGet restore"
    inputs:
      command: restore
      projects: |
        **/*.csproj
      feedsToUse: config
      noCache: true
      nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
      workingDirectory: '$(Build.SourcesDirectory)\UKHO.ExternalNotificationService.API'

  - task: DotNetCoreCLI@2
    displayName: "dotnet build task"
    inputs:
      command: "build"
      projects: "**/*.csproj"
      arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)'

  - task: DotNetCoreCLI@2
    displayName: "Publish WebAPI"
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: '**/*UKHO.ExternalNotificationService.API.csproj'
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\ExternalNotificationServiceWebAPI'
      zipAfterPublish: false
      modifyOutputPath: false

  - task: DotNetCoreCLI@2
    displayName: "Publish SubscriptionServiceWebJob Code"
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: "**/*UKHO.ExternalNotificationService.SubscriptionService.csproj"
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\ExternalNotificationServiceWebAPI\App_Data\jobs\continuous\SubscriptionServiceWebJob'
      zipAfterPublish: false
      modifyOutputPath: false

  - task: ArchiveFiles@2
    displayName: "Zip ENS service"
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)\ExternalNotificationServiceWebAPI\'
      includeRootFolder: false
      archiveType: "zip"
      archiveFile: '$(Build.ArtifactStagingDirectory)\ExternalNotificationServiceWebAPI\UKHO.ExternalNotificationService.API.zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: "Publish WebAPI Artifact"
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\ExternalNotificationServiceWebAPI\UKHO.ExternalNotificationService.API.zip'
      ArtifactName: ExternalNotificationService

- job: PublishFunctionalTestsAndTerraform
  workspace:
    clean: all
  displayName: "Publish Functional Tests And Terraform"
  steps:
  - task: UseDotNet@2
    displayName: Use .NET ${{ parameters.DotNetVersion }} sdk
    inputs:
      packageType: sdk
      version: '${{ parameters.DotNetVersion }}'
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: DotNetCoreCLI@2
    displayName: ".Net Core - NuGet restore"
    inputs:
      command: restore
      projects: |
        **/*.csproj
      feedsToUse: config
      noCache: true
      nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
      workingDirectory: '$(Build.SourcesDirectory)\UKHO.ExternalNotificationService.API'

  - task: DotNetCoreCLI@2
    displayName: "Publish functional test"
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: "**/*UKHO.ExternalNotificationService.API.FunctionalTests.csproj"
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\UKHO.ExternalNotificationService.API.FunctionalTests'
      zipAfterPublish: false

  - task: PublishBuildArtifacts@1
    displayName: "Publish Functional test Artifact"
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\UKHO.ExternalNotificationService.API.FunctionalTests'
      ArtifactName: functionaltests

  - task: CopyFiles@2
    displayName: Copy ExternalNotificationService Config
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\UKHO.ExternalNotificationService.API\UKHO.ExternalNotificationService.API\'
      Contents: 'appsettings.json'
      TargetFolder: '$(Build.SourcesDirectory)\Deployment\src'

  - task: CopyFiles@2
    displayName: "Copy OpenAPI spec for deployment"
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: 'external-notification-service.openApi.yaml'
      TargetFolder: '$(Build.SourcesDirectory)\Deployment\src\APIM'
 
  - task: CopyFiles@2
    displayName: "Copy OpenAPI spec for deployment (ENS Monitor)"
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: 'external-notification-service-monitor.openApi.yaml'
      TargetFolder: '$(Build.SourcesDirectory)\Deployment\src\APIM'

  - task: PublishBuildArtifacts@1
    displayName: "Publish terraform Artifacts"
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\Deployment'
      ArtifactName: terraformartifact

- job: BuildAndPublishStubAPIAndTerraform
  workspace:
    clean: all
  displayName: "Build and Publish Stub API And Terraform"
  steps:
  - task: PowerShell@2
    displayName: "Set assembly version numbers based on build ID"
    inputs:
      targetType: filePath
      filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
      arguments: '-buildNumber "$(Build.BuildNumber)" -solutionDirectory "$(Build.SourcesDirectory)\UKHO.D365CallbackDistributorStub.API\" -UKHOAssemblyCompany "$env:UKHOAssemblyCompany" -UKHOAssemblyCopyright "$(UKHOAssemblyCopyright)" -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix" -UKHOAssemblyProduct "$(UKHOAssemblyProduct) Stub"'

  - task: UseDotNet@2
    displayName: Use .NET ${{ parameters.DotNetVersion }} sdk
    inputs:
      packageType: sdk
      version: '${{ parameters.DotNetVersion }}'
      workingDirectory: '$(Build.SourcesDirectory)'

  - task: DotNetCoreCLI@2
    displayName: ".Net Core - NuGet restore"
    inputs:
      command: restore
      projects: |
        **/*.csproj
      feedsToUse: config
      noCache: true
      nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
      workingDirectory: '$(Build.SourcesDirectory)\UKHO.D365CallbackDistributorStub.API'

  - task: DotNetCoreCLI@2
    displayName: "dotnet build task"
    inputs:
      command: "build"
      projects: "**/*UKHO.D365CallbackDistributorStub.API.csproj"
      arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)'
      workingDirectory: '$(Build.SourcesDirectory)\UKHO.D365CallbackDistributorStub.API'

  - task: DotNetCoreCLI@2
    displayName: "Publish StubWebAPI"
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: '**/*UKHO.D365CallbackDistributorStub.API.csproj'
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)\StubWebAPI'
      zipAfterPublish: true
      modifyOutputPath: true

  - task: PublishBuildArtifacts@1
    displayName: "Publish Stub WebAPI Artifact"
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)\StubWebAPI'
      ArtifactName: StubWebAPI



     
