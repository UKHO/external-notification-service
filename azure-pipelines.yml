name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false

  - name: DisableDependencyCheck
    displayName: "Disable OWASP dependency checking"
    type: boolean
    default: false


trigger:
  - main
  - release/*
  - develop

schedules:
- cron: "0 4 * * 1"
  displayName: "Weekly NVD Check Build"
  branches:
    include:
    - main
  always: true

pool: 
    name: NautilusBuild
    demands: vs_16 -equals 1 #exclude agents 13 and 14 as code coverage report fails

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: UKHOAssemblyCompany
    value: "UK Hydrographic Office"
  - name: UKHOAssemblyVersionPrefix
    value: "1.0."
  - name: UKHOAssemblyProduct
    value: "External Notification Service"
  - name: UKHOAssemblyCopyright
    value: "Copyright Â© UK Hydrographic Office"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.7.2"
  - name: DeploymentPool
    value: "Mare Nectaris"
  - name: WindowPool
    value: "NautilusBuild"

# Use globally defined retention policy
resources:
  repositories:
  - repository: UKHOTemplates
    type: github
    name: UKHO/devops-pipelinetemplates
    endpoint: UKHO
    ref: refs/heads/main

stages:
  - stage: BuildTestPublish
    displayName: "Build, test and publish"
    dependsOn: []
    jobs:
    - template: Deployment/templates/build-test-publish.yml  
      parameters:
        DisableDependencyCheck: ${{ parameters.DisableDependencyCheck }}
        DotNetVersion: '8.0.x'


  - stage: Devdeploy
    dependsOn: 
    - BuildTestPublish
    displayName: "Devdeploy (inc terraform, webapp deploy)"
    jobs:
    - template: Deployment/templates/deploy-solas-apim.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-Dev"
        ShortName: "Dev"
        Container: ${{variables.Container}}
    - template: Deployment/templates/app-deploy.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-Dev"
        ShortName: "Dev"
        ApimShortName: "Dev"
        AzureSubscriptionVersion: "Dev - A.008.02"
        RunFunctionalTests: true
        Container: ${{variables.Container}}


  - stage: IATDeploy
    dependsOn:
    - DevDeploy
    displayName: "IATDeploy (inc terraform, webapp deploy)"
    ## The final condition may be
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),!startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
    ## condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'),startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
    jobs:
    - template: Deployment/templates/deploy-solas-apim.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-IAT"
        ShortName: "IAT"
        Container: ${{variables.Container}}
    - template: Deployment/templates/app-deploy.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-IAT"
        ShortName: "IAT"
        ApimShortName: "Dev"
        AzureSubscriptionVersion: "IAT - A.011.08"
        RunFunctionalTests: false
        Container: ${{variables.Container}}


  - stage: PreProdDeploy
    dependsOn:
    - IATDeploy
    displayName: "PreProdDeploy (inc terraform, webapp deploy)"
    ## The final condition will be the same as QA
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    ## condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'),startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
    jobs:
    - template: Deployment/templates/deploy-solas-apim.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-Pre"
        ShortName: "Pre"
        Container: ${{variables.Container}}
    - template: Deployment/templates/app-deploy.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-Pre"
        ShortName: "Pre"
        ApimShortName: "Dev"
        AzureSubscriptionVersion: "PRE- A.011.08"
        RunFunctionalTests: false
        Container: ${{variables.Container}}      
  

  - stage: IATvNextDeploy
    dependsOn:
    - DevDeploy
    displayName: "IATvNextDeploy (inc terraform, webapp deploy)"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'),startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
    jobs:
    - template: Deployment/templates/deploy-solas-apim.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-IATvNext"
        ShortName: "IATvNext"
        Container: ${{variables.Container}}
    - template: Deployment/templates/app-deploy.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-IATvNext"
        ShortName: "IATvNext"
        ApimShortName: "Dev"
        AzureSubscriptionVersion: "vNext IAT - A.011.08"
        RunFunctionalTests: false
        Container: ${{variables.Container}}

  
  - stage: E2EvNextDeploy
    dependsOn:
    - IATvNextDeploy
    displayName: E2EvNextDeploy (inc terraform, webapp deploy)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
    - template: Deployment/templates/deploy-solas-apim.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-E2EvNext"
        ShortName: "E2EvNext"
        Container: ${{variables.Container}}
    - template: Deployment/templates/app-deploy.yml
      parameters:
        ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
        AzureEnvironment: "Ens-E2EvNext"
        ShortName: "E2EvNext"
        ApimShortName: "Dev"
        AzureSubscriptionVersion: "vNext E2E - A.011.08"
        RunFunctionalTests: false
        Container: ${{variables.Container}}
      

  - stage: QAdeploy
    dependsOn:
    - DevDeploy
    displayName: QAdeploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: QADeployApimSolas
        displayName: "QA - deploy SOLAS APIM"
        environment: "Ens-Qa"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ENS-QA-TF-Variables"
          - group: "ENS-QA-Variables"
          - group: "ENS-QA-APIM-SOLAS-Variables"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment-apim.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "UKHO-APIM-SOLAS-NonLive"
                    TerraformKeyVault: $(APIM_SOLAS_TERRAFORM_KEYVAULT)
                    APIMResourceGroup: $(APIM_SOLAS_RESOURCE_GROUP_NAME)
                    APIMServiceInstance: $(APIM_SOLAS_SERVICE_NAME)
                    tfstateStorageAccountRG: $(APIM_SOLAS_RESOURCE_GROUP_NAME)
                    tfstateStorageAccountName: $(APIM_SOLAS_TFSTATE_STORAGE_ACCOUNT_NAME)

      - deployment: QADeployApp
        dependsOn: [QADeployApimSolas]
        displayName: QA - deploy terraform and dotnet App
        environment: "Ens-Qa"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ENS-QA-TF-Variables"
          - group: "ENS-QA-Variables"
          - name: "D365AuthConfiguration.TenantId"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APIM-CLIENT-TENANT-ID)
          - name: "D365AuthConfiguration.ClientId"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APIM-CLIENT-CLIENT-ID)
          - name: "D365AuthConfiguration.ClientSecret"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APIM-CLIENT-SECRET-VALUE)
          - name: "EnsAuthConfiguration.ClientId"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APP-REGISTRATION-CLIENT-ID)
          - name: "EnsAuthConfiguration.TenantId"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APP-REGISTRATION-TENANT-ID)
          - name: "ElasticAPM.ApiKey"
            value: $(elasticAPM-ApiKey)
          - name: "ElasticAPM.Environment"
            value: $(elasticAPM-Environment)
          - name: "ElasticAPM.ServerURL"
            value: $(elasticAPM-ServerURL)
          - name: "ElasticAPM.ServiceName"
            value: $(elasticAPM-ServiceName)
          - name: "ElasticAPM.WebJobServiceName"
            value: $(elasticAPM-WebJobServiceName)
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "External Notification Service QA - A.008.02"

                - template: Deployment/templates/continuous-deployment-apim.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "UKHO-APIM-Dev"
                    TerraformKeyVault: $(APIM_TERRAFORM_KEYVAULT)
                    APIMResourceGroup: $(APIM_RESOURCE_GROUP_NAME)
                    APIMServiceInstance: $(APIM_SERVICE_NAME)
                    tfstateStorageAccountRG: $(APIM_TFSTATE_STORAGE_ACCOUNT_RG)
                    tfstateStorageAccountName: $(APIM_TFSTATE_STORAGE_ACCOUNT_NAME)

                - task: DownloadBuildArtifacts@0
                  displayName: "Download Functional test Artifact"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'functionaltests'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: FileTransform@2
                  displayName: "File Transform: functionaltests"
                  inputs:
                    folderPath: '$(Build.SourcesDirectory)/functionaltests/'
                    xmlTransformationRules:
                    jsonTargetFiles: '**/appsettings.json'

                - task: UseDotNet@2
                  displayName: 'Use .NET Core sdk'
                  inputs:
                    packageType: sdk
                    version: '8.0.x'

                - task: DotNetCoreCLI@2
                  displayName: "Run Functional tests"
                  inputs:
                    command: "test"
                    projects: |
                      **/*FunctionalTest*.dll
                      !**/*TestAdapter.dll
                      !**/obj/**
                    testRunTitle: "QA-AutomationTests"
                    workingDirectory: '$(Build.SourcesDirectory)/functionaltests'

      - job: Run_ADDS_E2E_tests
        displayName: Run ADDS E2E tests
        dependsOn: QADeployApp
        pool: $(DeploymentPool)
        variables:
          - group: "ADDS-E2E"
          - group: "ENS-QA-Variables"
          - name : ResourceGroup
            value : $[ dependencies.QADeployApp.outputs['QADeployApp.setVariable.ResourceGroupName'] ]
          - name : WEB_APP_NAME
            value : $[ dependencies.QADeployApp.outputs['QADeployApp.setVariable.WEB_APP'] ]
        container: ${{variables.Container}}
        steps:
        - task: DownloadBuildArtifacts@0
          displayName: "Download Integration test Artifact"
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'terraformartifact'
            downloadPath: '$(Pipeline.Workspace)'

        - task: PowerShell@2          
          displayName: "Run ADDS E2E pipeline tests"
          inputs:
              pwsh: true
              targetType: filePath
              filePath: '$(System.DefaultWorkingDirectory)/Deployment/ADDS-e2e-tests.ps1'
              arguments: '-queueSecret $(QueueSecret) -pollSecret $(PollSecret) -pollTimeInSecs $(PollTimeInSecs) -functionEndPoint $(FunctionEndPoint)'

        - task: AzureCLI@2
          displayName: "Swap Stub URL"
          condition: always()
          inputs:
            azureSubscription: "External Notification Service QA - A.008.02"
            scriptType: 'pscore'
            scriptLocation: 'scriptPath'
            scriptPath: '$(Pipeline.Workspace)/terraformartifact/set_stub_url.ps1'
            arguments: '-d365uri $(D365EnvApiUri) -resourceGroup $(ResourceGroup) -webappName $(WEB_APP_NAME)'

            
  - stage: Livedeploy
    dependsOn:
      - QADeploy
    displayName: Livedeploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: LiveDeployApimSolas
        displayName: "Live - deploy SOLAS APIM"
        environment: "Ens-Live"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ENS-Live-TF-Variables"
          - group: "ENS-Live-Variables"
          - group: "ENS-Live-APIM-SOLAS-Variables"
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment-apim.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "UKHO-APIM-SOLAS-Live"
                    TerraformKeyVault: $(APIM_SOLAS_TERRAFORM_KEYVAULT)
                    APIMResourceGroup: $(APIM_SOLAS_RESOURCE_GROUP_NAME)
                    APIMServiceInstance: $(APIM_SOLAS_SERVICE_NAME)
                    tfstateStorageAccountRG: $(APIM_SOLAS_RESOURCE_GROUP_NAME)
                    tfstateStorageAccountName: $(APIM_SOLAS_TFSTATE_STORAGE_ACCOUNT_NAME)

      - deployment: LiveDeployApp
        dependsOn: [LiveDeployApimSolas]
        displayName: Live - deploy terraform and dotnet App
        environment: "Ens-Live"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ENS-Live-TF-Variables"
          - group: "ENS-Live-Variables"
          - name: "D365AuthConfiguration.TenantId"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APIM-CLIENT-TENANT-ID)
          - name: "D365AuthConfiguration.ClientId"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APIM-CLIENT-CLIENT-ID)
          - name: "D365AuthConfiguration.ClientSecret"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APIM-CLIENT-SECRET-VALUE)
          - name: "EnsAuthConfiguration.ClientId"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APP-REGISTRATION-CLIENT-ID)
          - name: "EnsAuthConfiguration.TenantId"
            value: $(EXTERNAL-NOTIFICATION-SERVICE-APP-REGISTRATION-TENANT-ID)
          - name: "ElasticAPM.ApiKey"
            value: $(elasticAPM-ApiKey)
          - name: "ElasticAPM.Environment"
            value: $(elasticAPM-Environment)
          - name: "ElasticAPM.ServerURL"
            value: $(elasticAPM-ServerURL)
          - name: "ElasticAPM.ServiceName"
            value: $(elasticAPM-ServiceName)
          - name: "ElasticAPM.WebJobServiceName"
            value: $(elasticAPM-WebJobServiceName)
        strategy:
          runOnce:
            deploy:
              steps:
                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "External Notification Service Live - A.008.02"

                - template: Deployment/templates/continuous-deployment-apim.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "UKHO-APIM-Live"
                    TerraformKeyVault: $(APIM_TERRAFORM_KEYVAULT)
                    APIMResourceGroup: $(APIM_RESOURCE_GROUP_NAME)
                    APIMServiceInstance: $(APIM_SERVICE_NAME)
                    tfstateStorageAccountRG: $(APIM_TFSTATE_STORAGE_ACCOUNT_RG)
                    tfstateStorageAccountName: $(APIM_TFSTATE_STORAGE_ACCOUNT_NAME)

      - job: PostDeploymentActions
        dependsOn:
        - LiveDeployApp
        pool: $(WindowPool)
        displayName: Post Deployment Actions
        steps:
          - template: Deployment/templates/retain-pipeline.yml
